The dataserver tool is used to handle automatically uploading data to a server
for sorting and processing by googlesheet. The information below is specific
to the Intel implementation of the data server.

[HOW IT WORKS]

The otcpl-perf-data.jf.intel.com server has a "sleepgraph" user account which
has been configured to be able to run googlesheet with pre-installed
credentials. It has a shell script called "multitest" which handles the entire
process of analyzing and uploading data to google drive from a tarball. All you
need to do is transport the data and call multitest. This is what dataserver
does: generate a tar.gz file from a data folder, scp it to the server, and
call multitest.

usage: dataserver.py [-h] [-sshkeysetup] [-monitor] folder

positional arguments:
  folder        multitest folder, or "shell" to open an ssh shell

optional arguments:
  -h, --help    show this help message and exit
  -sshkeysetup  setup password-less access by copying ssh keys
  -monitor      Monitor server processing and wait for completion

[SETUP]

The best way to run the tool is with password-less access via ssh keys. If you
don't mind typing the password three times for each upload you can skip this
section. The following command is what you should run to configure ssh:

	$> ./tools/dataserver.py -sshkeysetup shell

The "shell" command opens an ssh shell to the data serer via the sleepgraph
account. The "-sshkeysetup" argument runs ssh-copy-id to add your id_rsa.pub
to the server's authorized keys file. You must have an id_rsa/id_rsa.pub key
pair in your ~/.ssh folder with a blank passphrase. You will have to login
once in order to copy the keys, and the tool will tell you if it worked. After
this you will not need to login again.

[UPLOADING DATA]

The data you want to upload should be contained in a single folder with one or
more multitest outputs from the sleepgraph tool. multitest outputs look like
this:

	# multitest for a specific kernel/host/mode
	suspend-x{count}-{date}-{time}
		# same kernel, host, mode for each individual test
		suspend-{date}-{time}
			host_mode.html
			host_mode_dmesg.txt(.gz)
			host_mode_ftrace.txt(.gz)
		suspend-{date}-{time}
			...
		...

You can include as many multitests as you want, in any folder structure you
want, and for any kernels/hosts/modes you want. The data server will sift
through them and sort them by kernel, host, and mode, and add them to the
web-hosted filesystem. The dataserver script will "tar cvzf" your folder
into a /tmp/folder.tar.gz file, then scp it to dataserver:/tmp, and finally
call "multitest /tmp/folder.tar.gz" on the server.

The tool should immediately exit after this, leaving the multitest command
running in the background on dataserver. However if you want to wait for the
data to complete its processing you can use the -monitor argument to poll.

ASYNCHRONOUS EXECUTION

This command uploads the data and kicks of multitest asynchronously. It will
tell you the log file to check and then disconnect.

	$> ./tools/dataserver.py folder
	Taring up folder for transport...
	Sending tarball to server...
	folder.tar.gz                           100%   23MB  11.2MB/s   00:02    
	Notifying server of new data...
	Logging at multitest-log-file.log
	Upload Complete

You can then wait or monitor the log like this:

	$> ssh sleepgraph@otcpl-perf-data.jf.intel.com "tail -f multitest-log-file.log"

SYNCHRONOUS EXECUTION

This command uploads the data and kicks of multitest synchronously. It will
print the output of the processing and exit when it's complete. Ctrl-C will
kill the process on the server.

	$> ./tools/dataserver.py -monitor folder
	Taring up folder for transport...
	Sending tarball to server...
	folder.tar.gz                           100%   23MB  11.2MB/s   00:02    
	Processing the data on the server...
	...
	Upload Complete

OUTPUT RESULTS

The multitest folders you supplied will be organized by kernel, host, and mode
and be available on the web server under the following folder structure:

	http://otcpl-perf-data.jf.intel.com/pm-graph-test/
		{kernel}
			{host}
				suspend-{mode}-{date}-{time}-multi
					summary-devices.html
					summary-issues.html
					summary.html
					suspend-{date}-{time}
					...
				...
			...
		...

The googlesheet spreadsheets will be available on google drive with pointers
to the timelines on the server.

	https://drive.google.com/open?id=1507yI_H_LBPAGRX9AMn86dfFAySC3u-t
		{kernel}
			{host}
				sleepgraph-{date}-{time}-{mode}-x{count}
				sleepgraph-{date}-{time}-{mode}-x{count}
				...
			{host}
				sleepgraph-{date}-{time}-{mode}-x{count}
				sleepgraph-{date}-{time}-{mode}-x{count}
				...
			...
		...
		
NOTE: the tool only allows one googlesheet process at a time so you must wait
til the system is free to use it.
