#
# This is the configuration file for sleepgraph. It contains
# all the tool arguments so that they don't have to be given on the
# command line. It also includes advanced settings for functions
# and kprobes. It is run like this
#
#    sudo ./sleepgraph.py -config thisfile.txt
#

[Settings]

# Verbosity
# print verbose messages (default: false)
verbose: false

# Suspend Mode
# e.g. standby, mem, freeze, disk (default: mem)
mode: mem

# Automatic Wakeup
# Use rtcwake to autoresume after X seconds, or off to disable (default: 15)
rtcwake: 15

# Add Logs
# add the dmesg and ftrace log to the html output (default: false)
addlogs: false

# Display function calls
# graph source functions in the timeline (default: false)
dev: true

# Callgraph
# gather detailed ftrace callgraph data on all timeline events (default: false)
callgraph: false

# Back to Back Suspend/Resume
# Run two suspend/resumes back to back (default: false)
x2: false

# Back to Back Suspend Delay
# Time delay between the two test runs in ms (default: 0 ms)
x2delay: 0

# Minimum Device Length
# graph only devices longer than min in the timeline (default: 0.001 ms)
mindev: 0.001

# Minimum Callgraph Length
# provide callgraph data for blocks longer than min (default: 0.001 ms)
mincg: 1

# Suspend/Resume Gap
# insert a small visible gap between suspend and resume on the timeline (default: false)
srgap: false

# Output Directory Format
# output folder for html, ftrace, and dmesg. Use {date} and {time} for current values
output-dir: suspend-{hostname}-{date}-{time}-serio

# Override default timeline entries
# Do not use the internal default functions for timeline entries (default: false)
# Set this to true if you intend to only use the ones defined in this config
override-timeline-functions: false

# Override default dev timeline entries
# Do not use the internal default functions for dev timeline entries (default: false)
# Set this to true if you intend to only use the ones defined in this config
override-dev-timeline-functions: false

[dev_timeline_functions_x86_64]
#
# Dev mode function calls to display inside timeline entries
#
# This is a list of kprobes which use both symbol data and function arg data.
# The function calls are displayed on the timeline alongside the device blocks.
# The args are pulled directly from the stack using this architecture's registers
# and stack formatting. Three pieces of info are required. The function name,
# a format string, and an argument list
#
# Entry format:
#
#   function: format{fn_arg1}_{fn_arg2} fn_arg1 fn_arg2 ... [color=purple]
#
# Required Arguments:
#
#   function: The symbol name for the function you want probed, this is the
#             minimum required for an entry, it will show up as the function
#             name with no arguments.
#
#       example: ata_eh_recover:
#
# Optional Arguments:
#
#   format: The format to display the data on the timeline in. Use braces to
#           enclose the arg names.
#
#       example: ata{port}_port_reset
#
#   color: The color of the entry block in the timeline. The default color is
#          transparent, so the entry shares the phase color. The color is an
#          html color string, either a word, or an RGB.
# 
#       example: [color=#CC00CC]
#
#   arglist: A list of arguments from registers/stack addresses. See URL:
#            https://www.kernel.org/doc/Documentation/trace/kprobetrace.txt
#
#       example: port=+36(%di):s32
#
#            For x86_64: the 1st 6 function arguments go in registers
#            %di, %si, %dx, %cx, %8, %9 respectively, the remaining args are
#            pushed onto the stack. All addresses are 8 bytes (void, int, etc).
#
#            1st function arg is a struct address, 36 bytes in is a 32bit short,
#            get that number and set it to arg "port"
#
#            int ata_eh_recover(struct ata_port *ap, ...
#            struct ata_port {
#              struct Scsi_Host    *scsi_host;
#              struct ata_port_operations *ops;
#              spinlock_t      *lock;
#              unsigned long       flags;
#              unsigned int        pflags;
#              unsigned int        print_id;
#              unsigned int        local_port_no;     <----------
#              ...
#
# Example: Display ATA port reset as ataN_port_reset in the timeline
#
#       ata_eh_recover: ata{port}_port_reset port=+36(%di):s32 [color=red]
#
serio_reconnect_port: serio_reconnect_port({phys}/{name}) name=+8(%di):string phys=+40(%di):string
serio_disconnect_port: serio_disconnect_port({phys}/{name}) name=+8(%di):string phys=+40(%di):string [color=ffc2c2]
serio_find_driver: serio_find_driver({phys}/{name}) name=+8(%di):string phys=+40(%di):string [color=ffc2c2]
#alps_rpt_cmd: alps_rpt_cmd({icmd}/{rcmd}) icmd=%si rcmd=%dx
ps2_command: ps2_command_{name}({cmd}) cmd=%dx name=+8(+0(%di)):string [color=c2c2ff]
serio_handle_event:
serio_suspend:
psmouse_connect:
cortron_detect:
intellimouse_detect:
im_explorer_detect:
genius_detect:
thinking_detect:
ps2bare_detect:
synaptics_detect:
focaltech_detect:
alps_detect:
elantech_detect:
lifebook_detect:
fsp_detect:
trackpoint_detect:
touchkit_ps2_detect:
cypress_detect:
